services:

  merchant-service:
    image: npgw/merchant:latest
    container_name: merchant-service
    depends_on:
      aws-mock:
        condition: service_healthy
      acquirer-ngenius-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    build:
      context: ../../../services/http/http-service-merchant
      dockerfile: Dockerfile
    entrypoint: ["java","-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005","-jar","/http-service-merchant.jar"]
    env_file: ee.env
    ports:
      - "8080:8080"
      - "5080:5005"

  notification-service:
    image: npgw/notification:latest
    container_name: notification-service
    depends_on:
      aws-mock:
        condition: service_healthy
    build:
      context: ../../../services/http/http-service-notification
      dockerfile: Dockerfile
    entrypoint: ["java","-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005","-jar","/http-service-notification.jar"]
    env_file: ee.env
    ports:
      - "5081:5005"

  acquirer-ngenius-service:
    image: npgw/acquirer-ngenius:latest
    container_name: acquirer-ngenius-service
    depends_on:
      mock-acquirer-ngenius-service:
        condition: service_healthy
    build:
      context: ../../../services/http/http-service-acquirer-ngenius
      dockerfile: Dockerfile
    entrypoint: ["java","-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005","-jar","/http-service-acquirer-ngenius.jar"]
    ports:
      - "5082:5005"

  mock-acquirer-ngenius-service:
    image: npgw/mock-acquirer-ngenius:latest
    container_name: mock-acquirer-ngenius-service
    build:
      context: ../../http-service-mock-acquirer-ngenius
      dockerfile: Dockerfile
    entrypoint: ["java","-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005","-jar","/http-service-mock-acquirer-ngenius.jar"]
    environment:
      - MOCK_NGENIUS_SERVER_URL=http://mock-acquirer-ngenius-service
      - MOCK_NGENIUS_CLIENT_URL=http://localhost
    ports:
      - "80:80"
      - "5083:5005"

  portal-service:
    image: npgw/portal:latest
    container_name: portal-service
    depends_on:
      aws-mock:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    build:
      context: ../../../services/http/http-service-portal
      dockerfile: Dockerfile
    entrypoint: ["java","-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005","-jar","/http-service-portal.jar"]
    env_file: ee.env
    ports:
      - "8090:8090"
      - "5090:5005"

  opensearch:
    container_name: opensearch
    build:
      context: ../image-opensearch
      dockerfile: Dockerfile
    env_file:
      - path: ee.env
    ports:
      - "9200:9200"
      - "9600:9600"
    ulimits:
      memlock:
        soft: -1
        hard: -1

  aws-mock:
    container_name: aws-mock
    build:
      context: ../image-aws-mock
      dockerfile: Dockerfile
    env_file:
      - path: ee.env
      - path: ../../../.env
        required: false
    environment:
      - SERVICES=dynamodb,sqs,sns,ssm,cognito-idp,apigateway,events,s3,lambda,scheduler
    ports:
      - "4566:4566"
    volumes:
      - ./aws-mock-init:/etc/localstack/init/ready.d
      - ../../../_common/lambda:/lambda
      # this is required for lambda, as it launches its own docker container
      - /var/run/docker.sock:/var/run/docker.sock
