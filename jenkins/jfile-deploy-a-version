pipeline {
    agent { label 'build-node' }

    parameters {
        string(name: 'RELEASE_VERSION', defaultValue: 'latest', description: 'Release version')
        choice(name: 'ENVIRONMENT_NAME', choices: ['test', 'dev', 'prod', 'sandbox'], description: 'Deployment environment')
        booleanParam(name: 'APPLY_TERRAFORM', defaultValue: true, description: 'If checked, terraform will be applied')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'If checked, API tests will be run')
    }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_BUCKET_NAME = 'npgw-versions'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
    }

    stages {
        stage('Determine AWS Role') {
            steps {
                script {
                    def roles = [
                        'test'   : 'arn:aws:iam::820242903147:role/npgw-jenkins-deploy-a-version-role',
                        'dev'    : 'arn:aws:iam::872515291967:role/npgw-jenkins-deploy-a-version-role',
                        'prod'   : 'arn:aws:iam::721719382766:role/npgw-jenkins-deploy-a-version-role',
                        'sandbox': 'arn:aws:iam::225989351233:role/npgw-jenkins-deploy-a-version-role'
                    ]
                    env.ROLE_TO_ASSUME = roles[params.ENVIRONMENT_NAME] ?: error("Invalid environment: ${params.ENVIRONMENT_NAME}")
                }
            }
        }

        stage('Get Release Version') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                        if (params.RELEASE_VERSION == 'latest') {
                            env.RELEASE_VERSION = sh(script: """aws ecr describe-images --repository-name npgw/merchant --query 'reverse(sort_by(imageDetails,& imagePushedAt)[-1].imageTags)[0]' --output text""", returnStdout: true).trim()
                        } else {
                            env.RELEASE_VERSION = params.RELEASE_VERSION
                        }
                    }
                }
            }
        }

        stage('Validate Release Version') {
            steps {
                script {
                    if (!env.RELEASE_VERSION) {
                        error("Release version is null. Exiting...")
                    }
                }
            }
        }

        stage('Apply terraform') {
            when {
                expression {
                    return params.APPLY_TERRAFORM
                }
            }
            steps {
                script {
                    build job: 'apply-an-environment',
                        parameters: [
                            string(name: 'RELEASE_VERSION', value: env.RELEASE_VERSION),
                            string(name: 'ENVIRONMENT_NAME', value: env.ENVIRONMENT_NAME),
                            string(name: 'ACTION', value: 'apply'),
                        ],
                        wait: true,
                        propagate: true
                }
            }
        }

        stage('Get Service List') {
            steps {
                script {
                    env.SERVICE_LIST = sh(script: "cat ${WORKSPACE}/.github/SERVICE_LIST.json", returnStdout: true).trim()
                }
            }
        }

        stage('Assume Correct AWS Role') {
            steps {
                script {
                    def credentialsJson = sh(script: """
                        aws sts assume-role \
                            --role-arn ${env.ROLE_TO_ASSUME} \
                            --role-session-name JenkinsDeploySession
                        """, returnStdout: true).trim()

                    env.AWS_ACCESS_KEY_ID = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.AccessKeyId'", returnStdout: true).trim()
                    env.AWS_SECRET_ACCESS_KEY = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SecretAccessKey'", returnStdout: true).trim()
                    env.AWS_SESSION_TOKEN = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SessionToken'", returnStdout: true).trim()
                }
            }
        }

        stage('Deploy Services') {
            steps {
                script {
                    def services = readJSON text: env.SERVICE_LIST
                    for (service in services) {
                        def taskDefinition = service.serviceName
                        def imageUrl = "${env.AWS_REPOSITORY_URL}/npgw/${service.repoName}:${env.RELEASE_VERSION}"
                        def clusterName = service.clusterName

                        sh """
                        aws ecs describe-task-definition --task-definition ${taskDefinition} > task.json
                        jq --arg IMAGE "${imageUrl}" '.taskDefinition | .containerDefinitions[0].image = \$IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task.json > new-task.json
                        aws ecs register-task-definition --family ${taskDefinition} --cli-input-json file://new-task.json
                        TASK_REVISION=\$(aws ecs describe-task-definition --task-definition ${taskDefinition} --query 'taskDefinition.revision' --output text)
                        aws ecs update-service --cluster ${clusterName} --service ${taskDefinition} --task-definition ${taskDefinition}:\$TASK_REVISION --force-new-deployment
                        until aws ecs describe-services --cluster ${clusterName} --services ${taskDefinition} --query "services[0].deployments[?status=='PRIMARY'].rolloutState" --output text | grep -q "COMPLETED"; do echo "Waiting... rolloutState=\$rolloutState" sleep 10; done
                        """
                    }
                }
            }
        }

        stage('Fetch portal and docs builds') {
            steps {
                script {
                    def targetBucketName = "${params.ENVIRONMENT_NAME}.npgw.xyz"
                    def targetDocsBucketName = "docs.${params.ENVIRONMENT_NAME}.npgw.xyz"
                    if (params.ENVIRONMENT_NAME == 'prod') {
                        targetBucketName = "npgw.xyz"
                        targetDocsBucketName = "docs.npgw.xyz"
                    }

                    sh """
                        aws s3 sync s3://${env.AWS_BUCKET_NAME}/npgw-portal/${env.RELEASE_VERSION}/ s3://${targetBucketName} --delete
                        aws s3 sync s3://${env.AWS_BUCKET_NAME}/npgw-common/${env.RELEASE_VERSION}/docs s3://${targetDocsBucketName} --delete
                    """
                }
            }
        }

        stage('Invalidate CloudFront Caches') {
            steps {
                script {
                    def distributionIds = sh(script: """
                        aws cloudfront list-distributions \
                            --region us-east-1 \
                            --query "DistributionList.Items[].Id" \
                            --output text
                    """, returnStdout: true).trim().split()

                    if (!distributionIds) {
                        error("Error: No CloudFront Distribution IDs found for environment ${params.ENVIRONMENT_NAME}")
                    }

                    distributionIds.each { distId ->
                        sh "aws cloudfront create-invalidation --distribution-id ${distId} --paths '/*'"
                    }
                }
            }
        }

        stage('Test deployed service') {
            when {
                expression {
                    return params.RUN_TESTS
                }
            }
            steps {
                script {
                    build job: 'test-an-environment',
                        parameters: [
                            string(name: 'RELEASE_VERSION', value: env.RELEASE_VERSION),
                            string(name: 'ENVIRONMENT_NAME', value: env.ENVIRONMENT_NAME)
                        ],
                        wait: true,
                        propagate: true
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}