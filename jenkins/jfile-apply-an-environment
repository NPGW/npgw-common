@Library('npgw-lib@refactor-apply-env') _

pipeline {
  agent { label 'build-node' }

  parameters {
    string(name: 'RELEASE_VERSION', defaultValue: 'latest', description: 'Release version')
    choice(name: 'ENVIRONMENT_NAME', choices: ['test', 'dev', 'sandbox', 'prod'], description: 'Target environment')
    choice(name: 'ACTION', choices: ['plan', 'apply', 'custom'], description: 'Terraform action (destroy must be typed manually)')
    string(name: 'CUSTOM_ACTION', defaultValue: '', description: 'plan, apply -> [branch name] | custom -> "destroy"')
  }

  environment {
    AWS_REGION         = 'eu-central-1'
    AWS_BUCKET_NAME    = 'npgw-versions'
    IMAGE_REPO         = '214404897309.dkr.ecr.eu-central-1.amazonaws.com/npgw/merchant'
    PROVIDER_TF_PATH   = 'infra/provider.tf'
    VARS_FILE_PATH     = 'infra/var.tfvars'
  }

  stages {
    stage('Clean Workspace') {
      steps {
        deleteDir()
      }
    }

    stage('Determine AWS Role') {
      steps {
        script {
            env.ROLE_TO_ASSUME = determineAwsRole(params.ENVIRONMENT_NAME, 'terraform')
            echo "Assuming role: ${env.ROLE_TO_ASSUME}"
        }
      }
    }

    stage('Assume Role') {
      steps {
        assumeCorrectAwsRole(env.ROLE_TO_ASSUME)
      }
    }

    stage('Resolve latest ECR tag if RELEASE_VERSION == latest') {
      steps {
        dir("infra-${params.ENVIRONMENT_NAME}") {
          script {
            if (params.RELEASE_VERSION == 'latest') {
              env.RELEASE_VERSION = getLatestEcrTag("npgw/merchant", env.AWS_REGION)
              sh "echo 'image_tag = \"${env.RELEASE_VERSION}\"' >> var.tfvars"
            } else {
              env.RELEASE_VERSION = params.RELEASE_VERSION
            }
          }
        }
      }
    }

    stage('Checkout') {
      steps {
        script {
          def useGit = (params.ACTION in ['plan', 'apply']) && params.CUSTOM_ACTION?.trim()
          if (useGit) {
            echo "Checking out from Git branch: ${params.CUSTOM_ACTION}"
            checkoutRepos(['npgw-terraform': params.CUSTOM_ACTION?.trim()])
          } else {
            echo "Syncing from S3 for RELEASE_VERSION: ${env.RELEASE_VERSION}"
            sh """
            mkdir -p "${WORKSPACE}/npgw-terraform"
            aws s3 sync s3://${env.AWS_BUCKET_NAME}/npgw-terraform/${env.RELEASE_VERSION}/ ${WORKSPACE}/npgw-terraform/
            """
          }
        }
      }
    }

    stage('Prepare Working Directory') {
      steps {
        sh """
          cp -R npgw-terraform/infra/. infra-${params.ENVIRONMENT_NAME}
          sed -i 's|npgw-terraform-state-|npgw-terraform-state-${params.ENVIRONMENT_NAME}|' infra-${params.ENVIRONMENT_NAME}/provider.tf
        """
      }
    }

    stage('Create var.tfvars') {
      steps {
        dir("infra-${params.ENVIRONMENT_NAME}") {
          sh "echo 'image_source_tag = \"${IMAGE_REPO}:${env.RELEASE_VERSION}\"' > var.tfvars"
        }
      }
    }

    stage('Download OpenAPI specs') {
      steps {
        dir("infra-${params.ENVIRONMENT_NAME}") {
          sh """
            aws s3 cp s3://${env.AWS_BUCKET_NAME}/npgw-common/${env.RELEASE_VERSION}/api/merchant.yaml merchant-v1.yaml --region ${env.AWS_REGION}
            aws s3 cp s3://${env.AWS_BUCKET_NAME}/npgw-common/${env.RELEASE_VERSION}/api/portal.yaml portal-v1.yaml --region ${env.AWS_REGION}
          """
        }
      }
    }

    stage('Terraform Init') {
      steps {
        dir("infra-${params.ENVIRONMENT_NAME}") {
          sh 'terraform init'
        }
      }
    }

    stage('Terraform Plan') {
      when {
        expression { params.ACTION == 'plan' }
      }
      steps {
        dir("infra-${params.ENVIRONMENT_NAME}") {
          sh "terraform plan -var='environment=${params.ENVIRONMENT_NAME}' -var-file=var.tfvars"
        }
      }
    }

    stage('Terraform Apply') {
      when {
        expression { params.ACTION == 'apply' }
      }
      steps {
        dir("infra-${params.ENVIRONMENT_NAME}") {
          sh "terraform apply -auto-approve -var='environment=${params.ENVIRONMENT_NAME}' -var-file=var.tfvars"
        }
      }
    }

    stage('Terraform Destroy') {
      when {
        expression { params.ACTION == 'custom' && params.CUSTOM_ACTION == 'destroy' }
      }
      steps {
        dir("infra-${params.ENVIRONMENT_NAME}") {
          echo "\u26a0\ufe0f Confirmed: Destroying environment ${params.ENVIRONMENT_NAME}"
          sh "terraform destroy -auto-approve -var='environment=${params.ENVIRONMENT_NAME}' -var-file=var.tfvars"
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}