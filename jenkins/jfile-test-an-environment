def withAWSCreds(body) {
    withEnv([
        "AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}",
        "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}",
        "AWS_SESSION_TOKEN=${env.AWS_SESSION_TOKEN}",
        "AWS_REGION=${env.AWS_REGION}"
    ]) {
        body()
    }
}

pipeline {
    agent { label 'build-node' }

    tools {
        allure 'allure'
    }

    parameters {
        string(name: 'RELEASE_VERSION', defaultValue: 'latest', description: 'Image version to use')
        choice(name: 'ENVIRONMENT_NAME', choices: ['test', 'dev', 'prod', 'sandbox'], description: 'Deployment environment')
    }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        S3_ALLURE_ROOT = 's3://npgw-testing/allure-history'
    }

    stages {
        stage('Determine url where run tests') {
            steps {
                script {
                    def urls = [
                        'test'   : 'https://test.npgw.xyz',
                        'dev'    : 'https://dev.npgw.xyz',
                        'prod'   : 'n/aYet',
                        'sandbox': 'https://sandbox.npgw.xyz'
                    ]
                    env.URL = urls[params.ENVIRONMENT_NAME] ?: error("Invalid environment: ${params.ENVIRONMENT_NAME}")
                }
            }
        }

        stage('Get Release Version') {
            steps {
                script {
                    if (params.RELEASE_VERSION == 'latest') {
                        env.RELEASE_VERSION = sh(script: """aws ecr describe-images --repository-name npgw/api-test --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text""", returnStdout: true).trim()
                    } else {
                        env.RELEASE_VERSION = params.RELEASE_VERSION
                    }
                }
            }
        }

        stage('Validate Release Version') {
            steps {
                script {
                    if (!env.RELEASE_VERSION) {
                        error("Release version is null. Exiting...")
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                dir('npgw-services') {
                   git credentialsId: 'github-pat', url: 'https://github.com/NPGW/npgw-services.git', branch: 'main'
                }
            }
        }

        stage('Determine AWS Role') {
            steps {
                script {
                    def roles = [
                        'test'   : 'arn:aws:iam::820242903147:role/npgw-jenkins-deploy-a-version-role',
                        'dev'    : 'arn:aws:iam::872515291967:role/npgw-jenkins-deploy-a-version-role',
                        'prod'   : 'arn:aws:iam::721719382766:role/npgw-jenkins-deploy-a-version-role',
                        'sandbox': 'arn:aws:iam::225989351233:role/npgw-jenkins-deploy-a-version-role'
                    ]
                    env.ROLE_TO_ASSUME = roles[params.ENVIRONMENT_NAME] ?: error("Invalid environment: ${params.ENVIRONMENT_NAME}")
                }
            }
        }

        stage('Assume Correct AWS Role') {
            steps {
                script {
                    def credentialsJson = sh(script: """
                        aws sts assume-role \
                            --role-arn ${env.ROLE_TO_ASSUME} \
                            --role-session-name JenkinsUploadSession
                        """, returnStdout: true).trim()

                    env.AWS_ACCESS_KEY_ID = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.AccessKeyId'", returnStdout: true).trim()
                    env.AWS_SECRET_ACCESS_KEY = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SecretAccessKey'", returnStdout: true).trim()
                    env.AWS_SESSION_TOKEN = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SessionToken'", returnStdout: true).trim()
                }
            }
        }

        stage('Seed AWS Data') {
            steps {
                script {
                    echo "Seeding AWS data for environment: ${params.ENVIRONMENT_NAME}"
                    dir('npgw-services/tests/docker/docker-compose') {
                        withAWSCreds {
                            sh """
                                chmod +x aws-seed-script.sh
                                ./aws-seed-script.sh
                            """
                        }
                    }
                }
            }
        }

        stage('Run Api Tests') {
            steps {
                env.TESTS_FAILED = 'false'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script {
                        def imageUrl = "${env.AWS_REPOSITORY_URL}/npgw/api-test:${env.RELEASE_VERSION}"

                        sh """
                        unset AWS_ACCESS_KEY_ID
                        unset AWS_SECRET_ACCESS_KEY
                        unset AWS_SESSION_TOKEN
                        aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_REPOSITORY_URL}
                        docker run --rm \\
                            -e SERVICE_MERCHANT_URL=${env.URL}/merchant-v1 \\
                            -e SERVICE_MERCHANT_ID=merchant-server-ngenius \\
                            -e SERVICE_MERCHANT_USER_EMAIL=test@email.com \\
                            -e SERVICE_MERCHANT_USER_PASSWORD=Qwerty123! \\
                            -e SERVICE_PORTAL_URL=${env.URL}/portal-v1 \\
                            -e SERVICE_PORTAL_ID=merchant-server-ngenius \\
                            -e SERVICE_PORTAL_USER_EMAIL=test@email.com \\
                            -e SERVICE_PORTAL_USER_PASSWORD=Qwerty123! \\
                            -e TEST_ENVIRONMENT=AWS \\
                            -v ${WORKSPACE}/allure-results:/allure-results \\
                            ${imageUrl}
                        """
                    }
                    if (currentBuild.currentResult == 'FAILURE' || currentBuild.result == 'FAILURE') {
                                    env.TESTS_FAILED = 'true'
                                }
                }
            }
        }

        stage('Create Allure History Folder') {
            steps {
                sh 'sudo chown -R $(id -u):$(id -g) ${WORKSPACE}/allure-results || true'
                sh 'mkdir -p ${WORKSPACE}/allure-results/history'

            }
        }

        stage('Download Allure History') {
            steps {
                script {
                    withAWSCreds {
                        sh """
                            aws s3 cp ${env.S3_ALLURE_ROOT}/${params.ENVIRONMENT_NAME}/history/ ${WORKSPACE}/allure-results/history/ --recursive || echo "No previous history found (likely first run)."
                        """
                    }
                }
            }
        }

        stage('Generate Allure Report') {
            steps {
                withEnv(["PATH+ALLURE=${tool 'allure'}/bin"]) {
                    sh 'allure generate allure-results --clean -o allure-report'
                }
            }
        }

        stage('Upload Allure Report and History to S3') {
            steps {
                script {
                    sh """
                        aws s3 cp allure-report/ ${env.S3_ALLURE_ROOT}/${params.ENVIRONMENT_NAME}/report/ --recursive
                        aws s3 cp allure-report/history/ ${env.S3_ALLURE_ROOT}/${params.ENVIRONMENT_NAME}/history/ --recursive
                    """
                    }
            }
        }

        stage('Notify via Slack') {
            steps {
                script {
                    def s3ReportUrl = "https://npgw-testing.s3.eu-central-1.amazonaws.com/allure-history/${params.ENVIRONMENT_NAME}/report/index.html"

                    slackSend(
                        channel: '#npgw-notification-jenkins',
                        color: currentBuild.currentResult == 'SUCCESS' ? 'good' : 'danger',
                        message: "*[${env.JOB_NAME} #${env.BUILD_NUMBER}]* Allure report for `${params.ENVIRONMENT_NAME}`:\n${s3ReportUrl}"
                    )
                }
            }
        }

        stage('Fail Pipeline if Tests Failed') {
            steps {
                script {
                    if (env.TESTS_FAILED == 'true') {
                        error("API tests failed.")
                    }
                }
            }
        }

        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }
    }
}