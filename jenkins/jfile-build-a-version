@Library('npgw-lib') _

pipeline {
    agent { label 'build-node' }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch name for all repos')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'If unchecked, API tests will be skipped')
        string(name: 'TAG_VERSION', defaultValue: 'default', description: 'Tag version, ex. nightly, rc')
    }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_BUCKET_NAME = 'npgw-versions'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
        REPO_FILE = 'pipeline/REPO_LIST.json'
    }

    stages {
        stage('Docker Cleanup') {
            steps {
                sh """
                    docker system prune -a -f --volumes
                """
            }
        }

        stage('Define Major Version and Tag') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        if (params.BRANCH_NAME == 'main') {
                            def repos = readJSON text: sh(script: "cat ${WORKSPACE}/${REPO_FILE}", returnStdout: true).trim()
                            def branchesNames = []

                            repos.each { repo ->
                                def rawBranches = sh(
                                    script: "gh api /repos/NPGW/${repo.repoName}/branches?per_page=100",
                                    returnStdout: true
                                ).trim()
                                def branches = readJSON(text: rawBranches)
                                def rcBranches = branches.findAll { it.name ==~ /^release\/v.*-rc$/ }

                                if (rcBranches.size() != 1) {
                                    def rcNames = rcBranches.collect { it.name }
                                    error "Expected one release candidate candidate in NPGW/${repo.repoName}, but found ${rcNames.join(', ') ?: 'none'}"
                                }
                                branchesNames << rcBranches[0].name
                            }
                            if (branchesNames.toSet().size() > 1) {
                                error "Inconsistent release versions found: ${branchesNames.join(', ')}"
                            }
                            def versionMatch = branchesNames[0] =~ /^release\/v(.+)-rc$/
                            env.MAJOR_VERSION = versionMatch[0][1]
                            env.TAG_DEFAULT = "draft";
                        } else {
                            def branchVersionMatch = params.BRANCH_NAME =~ /\/v([0-9.]+)(?:-([^-\/]+))?$/
                            if (!branchVersionMatch) {
                                error("Branch name must include /v<major-version>.<minor-version>, got: ${params.BRANCH_NAME}")
                            }
                            env.MAJOR_VERSION = branchVersionMatch[0][1]
                            env.TAG_DEFAULT = branchVersionMatch[0][2] ?: "draft"
                        }
                        if (params.TAG_VERSION == "default") {
                           env.TAG_VERSION = env.TAG_DEFAULT;
                        } else {
                           env.TAG_VERSION = params.TAG_VERSION;
                        }
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    checkoutRepos([
                        'npgw-services': params.BRANCH_NAME,
                        'npgw-portal': 'main',
                        'npgw-terraform': 'main',
                    ])
                }
            }
        }

        stage('Get Release Version') {
            steps {
                script {
                    env.RELEASE_VERSION_WITHOUT_TAG = env.MAJOR_VERSION + sh(script: "echo .\$(date -u +%y%m%d%H%M)", returnStdout: true).trim()
                    env.RELEASE_VERSION = "${env.RELEASE_VERSION_WITHOUT_TAG}-${env.TAG_VERSION}"
                }
            }
        }

        stage('Validate Release Version') {
            steps {
                script {
                    if (!env.RELEASE_VERSION) {
                        error("Release version is null. Exiting...")
                    }
                }
            }
        }

        stage('Trigger build workflows') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        sh """
                            gh workflow run build-draft-release.yml \\
                                --repo NPGW/npgw-portal \\
                                --ref main \\
                                -f version=${env.RELEASE_VERSION_WITHOUT_TAG}

                            gh workflow run build-draft-release.yml \\
                                --repo NPGW/npgw-services \\
                                --ref main \\
                                -f version=${env.RELEASE_VERSION_WITHOUT_TAG}

                            gh workflow run build-draft-release.yml \\
                                --repo NPGW/npgw-common \\
                                --ref main \\
                                -f version=${env.RELEASE_VERSION_WITHOUT_TAG}
                        """
                    }
                }
            }
        }

        stage('Wait for build workflows') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        def version = env.RELEASE_VERSION_WITHOUT_TAG

                        timeout(time: 5, unit: 'MINUTES') {
                            parallel(
                                "npgw-portal": {
                                    waitUntil {
                                        def raw = sh(
                                            script: "gh release list --repo NPGW/npgw-portal --json tagName",
                                            returnStdout: true
                                        ).trim()
                                        def found = readJSON(text: raw).any { it.tagName == version }
                                        if (found) {
                                            echo "npgw-portal draft ${version} is ready!"
                                            return true
                                        } else {
                                            sleep time: 10, unit: 'SECONDS'
                                            return false
                                        }
                                    }
                                },
                                "npgw-services": {
                                    waitUntil {
                                        def raw = sh(
                                            script: "gh release list --repo NPGW/npgw-services --json tagName",
                                            returnStdout: true
                                        ).trim()
                                        def found = readJSON(text: raw).any { it.tagName == version }
                                        if (found) {
                                            echo "npgw-services draft ${version} is ready!"
                                            def out = sh(
                                                script: "gh release view ${version} --repo NPGW/npgw-services --json assets --jq '.assets[].name'",
                                                returnStdout: true
                                            ).trim()
                                            def assets = out ? out.split('\\n') : []
                                            if (assets.size() >= 7) {
                                                return true
                                            } else {
                                                sleep time: 10, unit: 'SECONDS'
                                                return false
                                            }
                                        } else {
                                            sleep time: 10, unit: 'SECONDS'
                                            return false
                                        }
                                    }
                                },
                                "npgw-common": {
                                    waitUntil {
                                        def raw = sh(
                                            script: "gh release list --repo NPGW/npgw-common --json tagName",
                                            returnStdout: true
                                        ).trim()
                                        def found = readJSON(text: raw).any { it.tagName == version }
                                        if (found) {
                                            echo "npgw-common draft ${version} is ready!"
                                            def out = sh(
                                                script: "gh release view ${version} --repo NPGW/npgw-common --json assets --jq '.assets[].name'",
                                                returnStdout: true
                                            ).trim()
                                            def assets = out ? out.split('\\n') : []
                                            if (assets.size() == 2) {
                                                return true
                                            } else {
                                                sleep time: 10, unit: 'SECONDS'
                                                return false
                                            }
                                        } else {
                                            sleep time: 10, unit: 'SECONDS'
                                            return false
                                        }
                                    }
                                }
                            )
                        }
                    }
                }
            }
        }

        stage('Download builds') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        def targetPortalDir = "${WORKSPACE}/npgw-portal"
                        def targetBackendDir = "${WORKSPACE}/npgw-services"
                        def targetApiSpecDir = "${WORKSPACE}/npgw-common"
                        sh """
                            gh release download ${env.RELEASE_VERSION_WITHOUT_TAG} \
                                --repo NPGW/npgw-portal \
                                --pattern dist.zip \
                                --dir ${targetPortalDir} --clobber

                            cd ${targetPortalDir}
                            if [ ! -f "dist.zip" ]; then
                                echo "ERROR: Portal UI build file not found in ${targetPortalDir}" >&2
                                exit 1
                            fi
                            mv dist.zip portal-web.zip

                            gh release download ${env.RELEASE_VERSION_WITHOUT_TAG} \
                                --repo NPGW/npgw-services \
                                --pattern '*.tar' \
                                --dir ${targetBackendDir} --clobber

                            if [ -z "\$(ls ${targetBackendDir}/*.tar 2>/dev/null)" ]; then
                                echo "ERROR: no .tar builds found in ${targetBackendDir}" >&2
                                exit 1
                            fi

                            gh release download ${env.RELEASE_VERSION_WITHOUT_TAG} \
                                --repo NPGW/npgw-common \
                                --pattern '*.tar' \
                                --dir ${targetApiSpecDir} --clobber

                            if [ -z "\$(ls ${targetApiSpecDir}/*.tar 2>/dev/null)" ]; then
                                echo "ERROR: no .tar builds found in ${targetApiSpecDir}" >&2
                                exit 1
                            fi
                        """

                        for (repo in ['npgw-portal', 'npgw-services', 'npgw-common']) {
                            def releasesJson = sh(
                                script: "gh release list --repo NPGW/${repo} --json tagName,isDraft",
                                returnStdout: true
                            ).trim()
                            def releases = readJSON(text: releasesJson)
                            releases.findAll { it.isDraft }.each { draft ->
                                echo "Deleting draft release ${draft.tagName} from ${repo}"
                                sh "gh release delete ${draft.tagName} --repo NPGW/${repo} --yes"
                            }
                        }
                    }
                }
            }
        }

        stage('Unarchive builds') {
            steps {
                script {
                    sh """
                        cd ./npgw-portal
                        mkdir -p ./portal-web
                        rm -rf ./portal-web
                        unzip -o portal-web.zip -d ./portal-web
                    """

                    def allImages   = readJSON file: "${WORKSPACE}/${IMAGE_FILE}"
                    def backends    = allImages.findAll { it.repoName != 'portal-web' }

                    backends.each { image ->
                        sh """
                            tar --overwrite -xvf ${WORKSPACE}/npgw-services/${image.repoName}.tar -C ${WORKSPACE}/npgw-services
                        """
                    }

                    sh """
                        cd ./npgw-common
                        mkdir -p docs
                        mkdir -p api
                        tar --overwrite -xvf docs.tar -C ./docs
                        tar --overwrite -xvf api.tar -C ./api
                    """
                }
            }
        }

        stage('Test in embedded environment (EE)') {
            when {
                expression {
                    return params.RUN_TESTS
                }
            }
            steps {
                withCredentials([string(credentialsId: 'localstack-auth-token', variable: 'LOCALSTACK_AUTH_TOKEN')]) {
                    script {
                        sh """
                            echo LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN} > npgw-services/.env
                            cd ./npgw-services/tests/docker/docker-compose
                            ./run-docker-compose-test.sh
                        """
                    }
                }
            }
        }

        stage('Assume Correct AWS Role') {
            steps {
                script {
                    def credentialsJson = sh(script: """
                        aws sts assume-role \
                            --role-arn ${env.AWS_ROLE} \
                            --role-session-name JenkinsUploadSession
                        """, returnStdout: true).trim()

                    env.AWS_ACCESS_KEY_ID = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.AccessKeyId'", returnStdout: true).trim()
                    env.AWS_SECRET_ACCESS_KEY = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SecretAccessKey'", returnStdout: true).trim()
                    env.AWS_SESSION_TOKEN = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SessionToken'", returnStdout: true).trim()
                }
            }
        }

        stage('Build and push Docker image') {
            steps {
                script {
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    for (image in imageList) {
                        def imageUrl = "${env.AWS_REPOSITORY_URL}/npgw/${image.repoName}:${env.RELEASE_VERSION}"

                        sh """
                        aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_REPOSITORY_URL}

                        cd ${WORKSPACE}
                        cd ${image.dockerContext}

                        docker build --no-cache -t "${imageUrl}" -f ${image.dockerFile} .
                        docker push "${imageUrl}"
                        """
                    }
                }
            }
        }

        stage('Upload to S3') {
            steps {
                script {
                    sh """
                    aws s3 sync ${WORKSPACE}/npgw-portal/portal-web/dist s3://${env.AWS_BUCKET_NAME}/npgw-portal/${env.RELEASE_VERSION}
                    aws s3 sync ${WORKSPACE}/npgw-common/docs s3://${env.AWS_BUCKET_NAME}/npgw-common/${env.RELEASE_VERSION}
                    aws s3 sync ${WORKSPACE}/npgw-common/api s3://${env.AWS_BUCKET_NAME}/npgw-common/${env.RELEASE_VERSION}
                    aws s3 sync ${WORKSPACE}/npgw-terraform s3://${env.AWS_BUCKET_NAME}/npgw-terraform/${env.RELEASE_VERSION}
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                currentBuild.description = "RELEASE_VERSION=${env.RELEASE_VERSION}"
            }
            cleanWs()
        }
    }
}