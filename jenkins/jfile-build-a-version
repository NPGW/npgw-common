pipeline {
    agent { label 'build-node' }

    parameters {
        string(name: 'MAJOR_VERSION', defaultValue: '0.1', description: 'Major version')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'If unchecked, API tests will be skipped')
        string(name: 'TAG_VERSION', defaultValue: 'draft', description: 'Tag version, ex. nightly, rc')
    }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_BUCKET_NAME = 'npgw-versions'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
    }

    stages {
        stage('Checkout') {
            steps {
                dir('npgw-services') {
                    git credentialsId: 'github-pat', url: 'https://github.com/NPGW/npgw-services.git', branch: 'main'
                }

                dir('npgw-portal') {
                    git credentialsId: 'github-pat', url: 'https://github.com/NPGW/npgw-portal.git', branch: 'main'
                }
            }
        }

        stage('Get Release Version') {
            steps {
                script {
                    env.RELEASE_VERSION = params.MAJOR_VERSION + sh(script: "echo .\$(date -u +%y%m%d%H%M)-${params.TAG_VERSION}", returnStdout: true).trim()
                }
            }
        }

        stage('Validate Release Version') {
            steps {
                script {
                    if (!env.RELEASE_VERSION) {
                        error("Release version is null. Exiting...")
                    }
                }
            }
        }

        stage('Trigger build workflows') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        sh """
                            gh workflow run build-draft-release.yml \\
                                --repo NPGW/npgw-portal \\
                                --ref main \\
                                -f version=${env.RELEASE_VERSION}

                            gh workflow run build-draft-release.yml \\
                                --repo NPGW/npgw-services \\
                                --ref main \\
                                -f version=${env.RELEASE_VERSION}
                        """
                    }
                }
            }
        }

        stage('Wait for build workflows') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        def version = env.RELEASE_VERSION

                        timeout(time: 5, unit: 'MINUTES') {
                            parallel(
                                portal: {
                                    waitUntil {
                                        def raw = sh(
                                            script: "gh release list --repo NPGW/npgw-portal --json tagName",
                                            returnStdout: true
                                        ).trim()
                                        def found = readJSON(text: raw).any { it.tagName == version }
                                        if (found) {
                                            echo "npgw-portal draft ${version} is ready!"
                                            return true
                                        } else {
                                            sleep time: 10, unit: 'SECONDS'
                                            return false
                                        }
                                    }
                                },
                                services: {
                                    waitUntil {
                                        def raw = sh(
                                            script: "gh release list --repo NPGW/npgw-services --json tagName",
                                            returnStdout: true
                                        ).trim()
                                        def found = readJSON(text: raw).any { it.tagName == version }
                                        if (found) {
                                            echo "npgw-services draft ${version} is ready!"
                                            def out = sh(
                                                script: "gh release view ${env.RELEASE_VERSION} --repo NPGW/npgw-services --json assets --jq '.assets[].name'",
                                                returnStdout: true
                                            ).trim()
                                            def assets = out ? out.split('\\n') : []
                                            if (assets.size() >= 7) {
                                                return true
                                            } else {
                                                sleep time: 10, unit: 'SECONDS'
                                                return false
                                            }
                                        } else {
                                            sleep time: 10, unit: 'SECONDS'
                                            return false
                                        }
                                    }
                                }
                            )
                        }
                    }
                }
            }
        }

        stage('Download builds') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        def targetPortalDir = "${WORKSPACE}/npgw-portal"
                        def targetBackendDir = "${WORKSPACE}/npgw-services"
                        sh """
                            gh release download ${env.RELEASE_VERSION} \
                                --repo NPGW/npgw-portal \
                                --pattern dist.zip \
                                --dir ${targetPortalDir} --clobber

                            cd ${targetPortalDir}
                            if [ ! -f "dist.zip" ]; then
                                echo "ERROR: Portal UI build file not found in ${targetPortalDir}" >&2
                                exit 1
                            fi
                            mv dist.zip portal-web.zip

                            gh release download ${env.RELEASE_VERSION} \
                                --repo NPGW/npgw-services \
                                --pattern '*.tar' \
                                --dir ${targetBackendDir} --clobber

                            if [ -z "\$(ls ${targetBackendDir}/*.tar 2>/dev/null)" ]; then
                                echo "ERROR: no .tar builds found in ${targetBackendDir}" >&2
                                exit 1
                            fi
                        """
                    }
                }
            }
        }

        stage('Unarchive builds') {
            steps {
                script {
                    sh """
                        cd ./npgw-portal
                        mkdir -p ./portal-web
                        rm -rf ./portal-web
                        unzip -o portal-web.zip -d ./portal-web
                    """

                    def allImages   = readJSON file: "${WORKSPACE}/${IMAGE_FILE}"
                    def backends    = allImages.findAll { it.repoName != 'portal-web' }

                    backends.each { image ->
                        sh """
                            tar --overwrite -xvf ${WORKSPACE}/npgw-services/${image.repoName}.tar -C ${WORKSPACE}/npgw-services
                        """
                    }
                }
            }
        }

        stage('Test in embedded environment (EE)') {
            when {
                expression {
                    return params.RUN_TESTS
                }
            }
            steps {
                withCredentials([string(credentialsId: 'localstack-auth-token', variable: 'LOCALSTACK_AUTH_TOKEN')]) {
                    script {
                        sh """
                            echo LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN} > npgw-services/.env
                            cd ./npgw-services/tests/docker/docker-compose
                            ./run-docker-compose-test.sh
                        """
                    }
                }
            }
        }

        stage('Assume Correct AWS Role') {
            steps {
                script {
                    def credentialsJson = sh(script: """
                        aws sts assume-role \
                            --role-arn ${env.AWS_ROLE} \
                            --role-session-name JenkinsUploadSession
                        """, returnStdout: true).trim()

                    env.AWS_ACCESS_KEY_ID = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.AccessKeyId'", returnStdout: true).trim()
                    env.AWS_SECRET_ACCESS_KEY = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SecretAccessKey'", returnStdout: true).trim()
                    env.AWS_SESSION_TOKEN = sh(script: "echo '${credentialsJson}' | jq -r '.Credentials.SessionToken'", returnStdout: true).trim()
                }
            }
        }

        stage('Build and push Docker image') {
            steps {
                script {
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    for (image in imageList) {
                        def imageUrl = "${env.AWS_REPOSITORY_URL}/npgw/${image.repoName}:${env.RELEASE_VERSION}"

                        sh """
                        aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_REPOSITORY_URL}

                        cd ${WORKSPACE}
                        cd ${image.dockerContext}

                        docker build -t "${imageUrl}" -f ${image.dockerFile} .
                        docker push "${imageUrl}"
                        """
                    }
                }
            }
        }

        stage('Upload portal UI build to S3') {
            steps {
                script {
                    sh """
                    aws s3 sync ${WORKSPACE}/npgw-portal/portal-web/dist s3://${env.AWS_BUCKET_NAME}/npgw-portal/build_${env.RELEASE_VERSION}
                    """
                }
            }
        }
    }
}