pipeline {
    agent { label 'build-node' }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_BUCKET_NAME = 'npgw-versions'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
        REPO_FILE = 'pipeline/REPO_LIST.json'
    }

    stages {
            stage('Test') {
                steps {
                      script {
                                // 1. List all tags (tab-separated), one per line
                                def allTags = sh(
                                  script: """
                                    aws ecr list-images \
                                      --repository-name npgw/portal \
                                      --filter tagStatus=TAGGED \
                                      --query 'imageIds[].imageTag' \
                                      --output text
                                  """,
                                  returnStdout: true
                                ).trim().split()

                                echo "${allTags}"


                                def allTags2 = sh(
                                  script: """
                                    aws ecr describe-images \
                                      --repository-name npgw/portal \
                                      --query 'imageDetails[].imagePushedAt' \
                                      --output text
                                  """,
                                  returnStdout: true
                                ).trim().split()

                                echo "${allTags2}"

                                def allTags3 = sh(
                                  script: """
                                    aws ecr describe-images \
                                      --repository-name npgw/portal \
                                      --query 'sort_by(imageDetails,&imagePushedAt)[*].[imageTags,imagePushedAt]' \
                                      ---output text
                                  """,
                                  returnStdout: true
                                ).trim().split()

                                echo "${allTags3}"


                                // 3. Build a map tag -> numeric date‐string
                                def dateMap = [:]
                                allTags.each { tag ->
                                  def m = (tag =~ /.+\.(\d{10})-.+$/)
                                  dateMap[tag] = m[0][1]
                                }

                                // 4. Sort by that numeric key, descending—work on a List, not the Map itself
                                def sortedEntries = dateMap.entrySet()
                                                          .toList()
                                                          .sort { e1, e2 -> e2.value <=> e1.value }

                                // 5. Take the 5 newest, then collect their tags
                                def latest5 = sortedEntries
                                                .take(5)
                                                .collect { it.key }

                                echo "Latest 5 ECR tags: ${latest5.join(', ')}"
                                env.LATEST_5_TAGS = latest5.join(',')
                              }
                }
            }
    }
}