def triggerDownstreamJob(jobName, params) {
    def downstream = build job: jobName,
        parameters: params,
        wait: true,
        propagate: false

    if (downstream.result != 'SUCCESS') {
        def downstreamDesc = downstream.getDescription() ?: ""
        def downstreamBuildNumber = downstream.getNumber()
        def upstreamBuildNumber = currentBuild.number

        def releaseVersion = (downstreamDesc =~ /RELEASE_VERSION=([^,]+)/)[0][1] ?: "unknown"
        def envName = (downstreamDesc =~ /ENVIRONMENT_NAME=([^\s,]+)/)[0][1] ?: ""

        def failedStage = "${downstream.getProjectName()} [${releaseVersion}, ${envName}]"

        slackSend(
            channel: '#npgw-notification-jenkins',
            color: '#danger',
            message: ":x: *FAILURE*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${upstreamBuildNumber}> at stage ${failedStage} failed â€“ see <${env.JENKINS_URL}/job/deploy-a-version/${downstreamBuildNumber}/|#${downstreamBuildNumber}>"
        )
        currentBuild.description = 'FAILURE_NOTIFIED'
        error("${jobName} failed")
    }
    return downstream
}

pipeline {
    agent { label 'build-node' }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_BUCKET_NAME = 'npgw-versions'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
        REPO_FILE = 'pipeline/REPO_LIST.json'
    }

    stages {
        stage('Cleanup old ECR & S3 builds') {
            steps {
                script {

                    def maxToKeep = 7
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    def s3RepoList = ['npgw-common', 'npgw-portal', 'npgw-terraform']
                    def suffixList = ['-release', '-rc', '-staging']

                    echo "Starting ECR old images cleanup..."
                    imageList.each { image ->
                        def allTags = sh(
                            script: """
                                aws ecr describe-images \
                                    --repository-name npgw/${image.repoName} \
                                    --query 'sort_by(imageDetails,&imagePushedAt)[*].imageTags[]' \
                                    --output text
                            """,
                            returnStdout: true
                        ).trim().split().toList()

                        def tagCategories = [:]
                        suffixList.each { suffix ->
                            tagCategories[suffix] = allTags.findAll { it.endsWith(suffix) }
                        }
                        tagCategories['-other'] = allTags.findAll { tag ->
                            !suffixList.any { suffix -> tag.endsWith(suffix) }
                        }

                        tagCategories.each { category, tagList ->
                            if (tagList.size() > maxToKeep) {
                                def tagsToDelete = tagList.take(tagList.size()  - maxToKeep)
                                echo "${category} images for ${image.repoName} to be deleted: ${tagsToDelete}"

                                tagsToDelete.each { tag ->
                                    sh """
                                        aws ecr batch-delete-image \
                                            --repository-name npgw/${image.repoName} \
                                            --image-ids imageTag=${tag}
                                    """
                                }
                            }
                        }
                    }

                    echo "Starting S3 old build cleanup..."
                    s3RepoList.each { s3Repo ->
                        def allPrefixes = sh(
                            script: """
                                aws s3api list-objects-v2 \
                                    --bucket "${AWS_BUCKET_NAME}" \
                                    --prefix "${s3Repo}/" \
                                    --delimiter "/" \
                                    --query "sort_by(CommonPrefixes, &Prefix)[*].Prefix" \
                                    --output text
                            """,
                            returnStdout: true
                        ).trim().split().toList()

                        def prefixCategories = [:]
                        suffixList.each { suffix ->
                           prefixCategories[suffix] = allPrefixes.findAll { it.endsWith("${suffix}/") }
                        }
                        prefixCategories['-other'] = allPrefixes.findAll { prefix ->
                            !suffixList.any { suffix -> prefix.endsWith("${suffix}/") }
                        }

                        prefixCategories.each { category, prefixList ->
                            if (prefixList.size() > maxToKeep) {
                                def prefixesToDelete =  prefixList.take(prefixList.size() - maxToKeep)
                                echo "${category} folders to be deleted: ${prefixesToDelete}"

                                prefixesToDelete.each { prefix ->
                                    sh """
                                        aws s3 rm s3://${AWS_BUCKET_NAME}/${prefix} --recursive
                                    """
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Trigger build-a-version pipeline') {
            steps {
                script {
                    def downstream = triggerDownstreamJob('build-a-version', [
                        string(name: 'TAG_VERSION', value: 'nightly')
                    ])

                    env.RELEASE_VERSION = downstream.buildVariables?.RELEASE_VERSION
                    if (!env.RELEASE_VERSION) {
                        error "RELEASE_VERSION not found for build-a-version"
                    }
                }
            }
        }

        stage('Trigger deploy-a-version pipeline: DEV environment') {
            steps {
                script {
                    triggerDownstreamJob('deploy-a-version', [
                        string(name: 'ENVIRONMENT_NAME', value: 'dev'),
                        booleanParam(name: 'RUN_TESTS', value: true)
                    ])
                }
            }
        }

        stage('Trigger deploy-a-version pipeline: TEST environment') {
            steps {
                script {
                    triggerDownstreamJob('deploy-a-version', [
                        string(name: 'ENVIRONMENT_NAME', value: 'test'),
                        booleanParam(name: 'RUN_TESTS', value: true)
                    ])
                }
            }
        }

        stage('Promote version to RC') {
            steps {
                script {
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    def nightlyTag = env.RELEASE_VERSION

                    for (image in imageList) {

                        if (!nightlyTag) {
                            error "No nightly tag found for ${image.repoName}"
                        }

                        sh """
                            IMAGE_DATA=\$(aws ecr batch-get-image \
                                --repository-name "npgw/${image.repoName}" \
                                --image-ids imageTag=${nightlyTag} \
                                --query 'images[0].{manifest: imageManifest, digest: imageId.imageDigest}' \
                                --output json)

                            IMAGE_MANIFEST=\$(echo "\$IMAGE_DATA" | jq -r '.manifest')
                            IMAGE_DIGEST=\$(echo "\$IMAGE_DATA" | jq -r '.digest')

                            aws ecr put-image \
                                --repository-name "npgw/${image.repoName}" \
                                --image-tag "${nightlyTag.replace('-nightly', '-rc')}" \
                                --image-manifest "\$IMAGE_MANIFEST" \
                                --image-digest "\$IMAGE_DIGEST"

                            aws ecr batch-delete-image \
                                --repository-name "npgw/${image.repoName}" \
                                --image-ids imageTag=${nightlyTag}
                        """
                    }

                    // rename S3 prefix from -nightly to -rc
                    sh """
                        for repo in npgw-portal npgw-common npgw-terraform; do
                            aws s3 mv \\
                                s3://${env.AWS_BUCKET_NAME}/\$repo/${nightlyTag}/ \\
                                s3://${env.AWS_BUCKET_NAME}/\$repo/${nightlyTag.replace('-nightly', '-rc')}/ \\
                                --recursive
                        done
                    """
                }
            }
        }

        stage('Merge main branch to rc') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        def repos = readJSON text: sh(script: "cat ${WORKSPACE}/${REPO_FILE}", returnStdout: true).trim()

                        def version
                        try {
                            version = (env.RELEASE_VERSION =~ /^(\d+\.\d+)\./)[0][1]
                        } catch (Exception e) {
                            error "Could not extract Major Version from ${env.RELEASE_VERSION}"
                        }
                        def rcBranchName = "release/v${version}-rc"

                        repos.each { repo ->
                            sh """
                                gh api -X POST /repos/NPGW/${repo.repoName}/merges \\
                                    -H "Accept: application/vnd.github+json" \\
                                    -f base=${rcBranchName} \\
                                    -f head=main \\
                                    -f commit_message="Merge main into ${rcBranchName}"
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend channel: '#npgw-notification-jenkins',
                      color: 'good',
                      message: ":white_check_mark: *SUCCESS*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${env.BUILD_NUMBER}>"
        }
        failure {
            script {
                if (currentBuild.description != 'FAILURE_NOTIFIED') {
                    slackSend channel: '#npgw-notification-jenkins',
                              color: 'danger',
                              message: ":x: *FAILURE*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${env.BUILD_NUMBER}>"
                }
            }
        }
        always {
            cleanWs()
        }
    }
}