pipeline {
    agent { label 'build-node' }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
    }

    stages {
        stage('Trigger build-a-version pipeline') {
            steps {
                script {
                    def downstream = build(
                        job: 'build-a-version',
                        parameters: [
                            string(name: 'MAJOR_VERSION', value: '0.1'),
                            booleanParam(name: 'RUN_TESTS', value: true),
                            string(name: 'TAG_VERSION', value: 'nightly')
                        ],
                        wait: true,
                        propagate: false
                    )

                    env.RELEASE_VERSION = downstream.buildVariables.RELEASE_VERSION
                    if (!env.RELEASE_VERSION) {
                        error "RELEASE_VERSION not found for build-a-version"
                    }

                    if (downstream.result != 'SUCCESS') {
                        slackSend(
                            channel: '#npgw-notification-jenkins',
                            color: 'danger',
                            message: ":x: *build-a-version* failed – see <${downstream.absoluteUrl}|#${downstream.number}>"
                        )
                        currentBuild.description = 'FAILURE_NOTIFIED'
                        error("Downstream pipeline failed")
                    }
                }
            }
        }

        stage('Trigger deploy-a-version pipeline: DEV environment') {
            steps {
                script {
                    def downstreamDev = build job: 'deploy-a-version',
                        parameters: [
                            string(name: 'ENVIRONMENT_NAME', value: 'dev'),
                            booleanParam(name: 'RUN_TESTS', value: true)
                        ],
                        wait: true,
                        propagate: false
                    if (downstreamDev.result != 'SUCCESS') {
                        def upstreamBuildNumber = currentBuild.number
                        def downstreamBuildNumber = downstreamDev.getNumber()
                        def failedStage = "deploy-a-version (DEV)"
                        def reason = downstreamDev.getDescription() ?: "See downstream logs"
                        slackSend(
                            channel: '#npgw-notification-jenkins',
                            color: '#danger',
                            message: ":x: FAILURE: nightly-run <${env.BUILD_URL}|#${upstreamBuildNumber}> at stage ${failedStage} failed – see <${env.JENKINS_URL}/job/deploy-a-version/${downstreamBuildNumber}/|#${downstreamBuildNumber}>"
                        )
                        currentBuild.description = 'FAILURE_NOTIFIED'
                        error("DEV deploy failed")
                    }
                }
            }
        }

        stage('Trigger deploy-a-version pipeline: TEST environment') {
            steps {
                script {
                    def downstreamTest = build job: 'deploy-a-version',
                        parameters: [
                            string(name: 'ENVIRONMENT_NAME', value: 'test'),
                            booleanParam(name: 'RUN_TESTS', value: true)
                        ],
                        wait: true,
                        propagate: false
                    if (downstreamTest.result != 'SUCCESS') {
                        def upstreamBuildNumber = currentBuild.number
                        def downstreamBuildNumber = downstreamTest.getNumber()
                        def failedStage = "deploy-a-version (TEST)"
                        def reason = downstreamTest.getDescription() ?: "See downstream logs"
                        slackSend(
                            color: 'danger',
                            message: ":x: FAILURE: nightly-run <${env.BUILD_URL}|#${upstreamBuildNumber}> at stage ${failedStage} failed – see <${env.JENKINS_URL}/job/deploy-a-version/${downstreamBuildNumber}/|#${downstreamBuildNumber}>"
                        )
                        currentBuild.description = 'FAILURE_NOTIFIED'
                        error("Test deploy failed")
                    }
                }
            }
        }

        stage('Promote version to RC') {
            steps {
                script {
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    def nightlyTag = env.RELEASE_VERSION

                    for (image in imageList) {

                        if (!nightlyTag) {
                            error "No nightly tag found for ${image.repoName}"
                        }

                        sh """
                            IMAGE_DATA=\$(aws ecr batch-get-image \
                              --repository-name "npgw/${image.repoName}" \
                              --image-ids imageTag=${nightlyTag} \
                              --query 'images[0].{manifest: imageManifest, digest: imageId.imageDigest}' \
                              --output json)

                            IMAGE_MANIFEST=\$(echo "\$IMAGE_DATA" | jq -r '.manifest')
                            IMAGE_DIGEST=\$(echo "\$IMAGE_DATA" | jq -r '.digest')

                            aws ecr put-image \
                              --repository-name "npgw/${image.repoName}" \
                              --image-tag "${nightlyTag.replace('-nightly', '-rc')}" \
                              --image-manifest "\$IMAGE_MANIFEST" \
                              --image-digest "\$IMAGE_DIGEST"
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend channel: '#npgw-notification-jenkins',
                      color: 'good',
                      message: ":v: *SUCCESS*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${env.BUILD_NUMBER}>"
        }
        failure {
            script {
                if (currentBuild.description != 'FAILURE_NOTIFIED') {
                    slackSend channel: '#npgw-notification-jenkins',
                              color: 'danger',
                              message: ":x: *FAILURE*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${env.BUILD_NUMBER}>"
                }
            }
        }
    }
}