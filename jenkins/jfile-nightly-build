pipeline {
    agent { label 'build-node' }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_BUCKET_NAME = 'npgw-versions'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
        REPO_FILE = 'pipeline/REPO_LIST.json'
    }

    stages {
        stage('Test') {
            steps {
                script {

                    def keepCount = 8

                    def ReleaseTagsToDelete = []
                    def RcTagsToDelete      = []
                    def OtherTagsToDelete   = []

                    def ReleasePrefixesToDelete = []
                    def RcPrefixesToDelete = []
                    def OtherPrefixesToDelete = []

                    echo "Starting ECR old images cleanup..."
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    def s3RepoList = ['npgw-common', 'npgw-portal', 'npgw-terraform']

                    imageList.each { image ->
                        def ReleaseTagsAll = sh(
                          script: """
                            aws ecr describe-images \
                              --repository-name npgw/${image.repoName} \
                              --query 'sort_by(imageDetails,&imagePushedAt)[*].imageTags[]' \
                              --output text
                          """,
                          returnStdout: true
                        ).trim().split().toList()

                        def ReleaseTags      = ReleaseTagsAll.findAll { it.endsWith('-release') }
                        def RcTags           = ReleaseTagsAll.findAll { it.endsWith('-rc') }
                        def OtherTags        = ReleaseTagsAll.findAll { idx ->
                                             !idx.endsWith('-rc') && !idx.endsWith('-release')
                                             }

                        if (ReleaseTags.size() > keepCount) {
                            ReleaseTagsToDelete = ReleaseTags.take(ReleaseTags.size() - keepCount)
                            echo "-release images for ${image.repoName} to be deleted: ${ReleaseTagsToDelete}"
                        }

                        if (RcTags.size() > keepCount) {
                            RcTagsToDelete = RcTags.take(RcTags.size() - keepCount)
                            echo "-rc images for ${image.repoName} to be deleted: ${RcTagsToDelete}"
                        }

                        if (OtherTags.size() > keepCount) {
                            OtherTagsToDelete = OtherTags.take(OtherTags.size() - keepCount)
                            echo "Other images for ${image.repoName} to be deleted: ${OtherTagsToDelete}"
                        }

                        for (tag in ReleaseTagsToDelete + RcTagsToDelete + OtherTagsToDelete) {
                            sh """
                                aws ecr batch-delete-image \
                                  --repository-name npgw/${image.repoName} \
                                  --image-ids imageTag=${tag}
                            """
                        }
                    }

                    echo "Starting S3 old build cleanup..."
                    s3RepoList.each { s3Repo ->
                        def allPrefixes = sh(
                            script: """
                              aws s3api list-objects-v2 \
                                --bucket "${AWS_BUCKET_NAME}" \
                                --prefix "${s3Repo}/" \
                                --delimiter "/" \
                                --query "sort_by(CommonPrefixes, &Prefix)[*].Prefix" \
                                --output text
                            """, returnStdout: true
                        ).trim().split().toList()

                        def ReleasePrefixes      = allPrefixes.findAll { it.endsWith('-release/') }.toSet()
                        def RcPrefixes           = allPrefixes.findAll { it.endsWith('-rc/') }.toSet()
                        def OtherPrefixes        = allPrefixes.findAll { idx ->
                                                 !idx.endsWith('-rc/') && !idx.endsWith('-release/')
                                                 }.toSet()

                        if (ReleasePrefixes.size() > keepCount) {
                             ReleasePrefixesToDelete = ReleasePrefixes.take(ReleasePrefixes.size() - keepCount)
                             echo "-release folders to be deleted: ${ReleasePrefixesToDelete}"
                        }

                        if (RcPrefixes.size() > keepCount) {
                             RcPrefixesToDelete = RcPrefixes.take(RcPrefixes.size() - keepCount)
                             echo "-rc folders to be deleted: ${RcPrefixesToDelete}"
                        }

                        if (OtherPrefixes.size() > keepCount) {
                             OtherPrefixesToDelete = OtherPrefixes.take(OtherPrefixes.size() - keepCount)
                             echo "Other folders to be deleted: ${OtherPrefixesToDelete}"
                        }

                        for (tag in ReleasePrefixesToDelete + RcPrefixesToDelete + OtherPrefixesToDelete) {
                            sh """
                                aws s3 rm s3://${AWS_BUCKET_NAME}/${tag} --recursive
                            """
                        }
                    }
                }
            }
        }
    }
}