pipeline {
    agent { label 'build-node' }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_BUCKET_NAME = 'npgw-versions'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
        REPO_FILE = 'pipeline/REPO_LIST.json'
    }

    stages {
            stage('Test') {
                steps {
                                    script {
                                        // List all tagged images
                                        def allTags = sh(returnStdout: true, script: '''
                                            aws ecr list-images \
                                                --repository-name npgw/portal \
                                                --filter tagStatus=TAGGED \
                                                --query 'imageIds[*].imageTag' \
                                                --output text
                                        ''').trim().split()

                                        // Filter tags matching our pattern (extract date portion)
                                        def datedTags = allTags.collect { tag ->
                                            def matcher = (tag =~ /.*\.([0-9]{10})-.*/)
                                            matcher ? [date: matcher[0][1], tag: tag] : null
                                        }.findAll { it }

                                        // Sort by date ascending, then take the last 5 and reverse for descending order
                                        def sorted = datedTags.sort { it.date }
                                        def lastFive = sorted.size() > 5 ? sorted[-5..-1] : sorted
                                        def latestFive = lastFive.reverse().collect { it.tag }

                                        echo "Latest 5 image tags: ${latestFive.join(', ')}"
                                    }
                }
            }
    }
}