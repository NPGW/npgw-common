pipeline {
    agent { label 'build-node' }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_BUCKET_NAME = 'npgw-versions'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
        REPO_FILE = 'pipeline/REPO_LIST.json'
    }

    stages {
            stage('Test') {
                steps {
                script {

                    def keepCount = 7

                    echo "Starting ECR old images cleanup..."
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()

                    imageList.each { image ->
                        def ReleaseTagsAll = sh(
                          script: """
                            aws ecr describe-images \
                              --repository-name npgw/${image.repoName} \
                              --query 'sort_by(imageDetails,&imagePushedAt)[*].imageTags[] | [? ends_with(@, `-release`)]' \
                              --output text
                          """,
                          returnStdout: true
                        ).trim().split().toList()

                        if (ReleaseTagsAll.size() > keepCount) {
                            def ReleaseTagsToDelete = OtherTagsAll.take(OtherTagsAll.size() - 5)
                        } else {
                            def ReleaseTagsToDelete = []
                        }

                        def RcTagsAll = sh(
                          script: """
                            aws ecr describe-images \
                              --repository-name npgw/${image.repoName} \
                              --query 'sort_by(imageDetails,&imagePushedAt)[*].imageTags[] | [? ends_with(@, `-rc`)]' \
                              --output text
                          """,
                          returnStdout: true
                        ).trim().split().toList()

                        if (RcTagsAll.size() > keepCount) {
                            def RcTagsToDelete = RcTagsAll.take(RcTagsAll.size() - 5)
                        } else {
                            def RcTagsToDelete = []
                        }

                        def OtherTagsAll = sh(
                          script: """
                            aws ecr describe-images \
                              --repository-name npgw/${image.repoName} \
                              --query 'sort_by(imageDetails,&imagePushedAt)[*].imageTags[] | [? !ends_with(@, `-rc`) && !ends_with(@, `-release`)]' \
                              --output text
                          """,
                          returnStdout: true
                        ).trim().split().toList()

                        if (OtherTagsAll.size() > keepCount) {
                            def OtherTagsToDelete = OtherTagsAll.take(OtherTagsAll.size() - 5)
                        } else {
                            def OtherTagsToDelete = []
                        }

                        for (tag in ReleaseTagsToDelete + RcTagsToDelete + OtherTagsToDelete) {
                            echo "Deleting image npgw/portal:${tag}"

                        }

                    }

                    echo "Starting S3 old build cleanup..."

                  }
                }
            }
    }
}