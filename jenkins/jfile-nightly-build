pipeline {
    agent { label 'build-node' }

    environment {
        AWS_REGION = 'eu-central-1'
        AWS_BUCKET_NAME = 'npgw-versions'
        AWS_REPOSITORY_URL = '214404897309.dkr.ecr.eu-central-1.amazonaws.com'
        AWS_ROLE = 'arn:aws:iam::214404897309:role/npgw-jenkins-build-a-version-role'

        IMAGE_FILE = '.github/IMAGE_LIST.json'
        REPO_FILE = 'pipeline/REPO_LIST.json'
    }

    stages {
        stage('Cleanup old ECR and S3 builds') {
            steps {
                script {

                    def keepCount = 8

                    def ReleaseTagsToDelete = []
                    def RcTagsToDelete      = []
                    def OtherTagsToDelete   = []

                    def ReleasePrefixesToDelete = []
                    def RcPrefixesToDelete = []
                    def OtherPrefixesToDelete = []

                    echo "Starting ECR old images cleanup..."
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    def s3RepoList = ['npgw-common', 'npgw-portal', 'npgw-terraform']

                    imageList.each { image ->
                        def ReleaseTagsAll = sh(
                          script: """
                            aws ecr describe-images \
                              --repository-name npgw/${image.repoName} \
                              --query 'sort_by(imageDetails,&imagePushedAt)[*].imageTags[]' \
                              --output text
                          """,
                          returnStdout: true
                        ).trim().split().toList()

                        def ReleaseTags      = ReleaseTagsAll.findAll { it.endsWith('-release') }
                        def RcTags           = ReleaseTagsAll.findAll { it.endsWith('-rc') }
                        def OtherTags        = ReleaseTagsAll.findAll { idx ->
                                             !idx.endsWith('-rc') && !idx.endsWith('-release')
                                             }

                        if (ReleaseTags.size() > keepCount) {
                            ReleaseTagsToDelete = ReleaseTags.take(ReleaseTags.size() - keepCount)
                            echo "-release images for ${image.repoName} to be deleted: ${ReleaseTagsToDelete}"
                        }

                        if (RcTags.size() > keepCount) {
                            RcTagsToDelete = RcTags.take(RcTags.size() - keepCount)
                            echo "-rc images for ${image.repoName} to be deleted: ${RcTagsToDelete}"
                        }

                        if (OtherTags.size() > keepCount) {
                            OtherTagsToDelete = OtherTags.take(OtherTags.size() - keepCount)
                            echo "Other images for ${image.repoName} to be deleted: ${OtherTagsToDelete}"
                        }

                        for (tag in ReleaseTagsToDelete + RcTagsToDelete + OtherTagsToDelete) {
                            sh """
                                aws ecr batch-delete-image \
                                  --repository-name npgw/${image.repoName} \
                                  --image-ids imageTag=${tag}
                            """
                        }
                    }

                    echo "Starting S3 old build cleanup..."
                    s3RepoList.each { s3Repo ->
                        def allPrefixes = sh(
                            script: """
                              aws s3api list-objects-v2 \
                                --bucket "${AWS_BUCKET_NAME}" \
                                --prefix "${s3Repo}/" \
                                --delimiter "/" \
                                --query "sort_by(CommonPrefixes, &Prefix)[*].Prefix" \
                                --output text
                            """, returnStdout: true
                        ).trim().split().toList()

                        def ReleasePrefixes      = allPrefixes.findAll { it.endsWith('-release/') }.toSet()
                        def RcPrefixes           = allPrefixes.findAll { it.endsWith('-rc/') }.toSet()
                        def OtherPrefixes        = allPrefixes.findAll { idx ->
                                                 !idx.endsWith('-rc/') && !idx.endsWith('-release/')
                                                 }.toSet()

                        if (ReleasePrefixes.size() > keepCount) {
                             ReleasePrefixesToDelete = ReleasePrefixes.take(ReleasePrefixes.size() - keepCount)
                             echo "-release folders to be deleted: ${ReleasePrefixesToDelete}"
                        }

                        if (RcPrefixes.size() > keepCount) {
                             RcPrefixesToDelete = RcPrefixes.take(RcPrefixes.size() - keepCount)
                             echo "-rc folders to be deleted: ${RcPrefixesToDelete}"
                        }

                        if (OtherPrefixes.size() > keepCount) {
                             OtherPrefixesToDelete = OtherPrefixes.take(OtherPrefixes.size() - keepCount)
                             echo "Other folders to be deleted: ${OtherPrefixesToDelete}"
                        }

                        for (tag in ReleasePrefixesToDelete + RcPrefixesToDelete + OtherPrefixesToDelete) {
                            sh """
                                aws s3 rm s3://${AWS_BUCKET_NAME}/${tag} --recursive
                            """
                        }
                    }
                }
            }
        }

        stage('Trigger build-a-version pipeline') {
            steps {
                script {
                    def downstream = build(
                        job: 'build-a-version',
                        parameters: [
                            string(name: 'TAG_VERSION', value: 'nightly')
                        ],
                        wait: true,
                        propagate: false
                    )

                    env.RELEASE_VERSION = downstream.buildVariables.RELEASE_VERSION
                    if (!env.RELEASE_VERSION) {
                        error "RELEASE_VERSION not found for build-a-version"
                    }

                    if (downstream.result != 'SUCCESS') {
                        def upstreamBuildNumber = currentBuild.number
                        def downstreamBuildNumber = downstream.getNumber()
                        def failedStage = "build-a-version"
                        slackSend(
                            channel: '#npgw-notification-jenkins',
                            color: 'danger',
                            message: ":x: *FAILURE*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${upstreamBuildNumber}> at stage ${failedStage} – see <${env.JENKINS_URL}/job/build-a-version/${downstreamBuildNumber}/|#${downstreamBuildNumber}>"
                        )
                        currentBuild.description = 'FAILURE_NOTIFIED'
                        error("Downstream pipeline failed")
                    }
                }
            }
        }

        stage('Trigger deploy-a-version pipeline: DEV environment') {
            steps {
                script {
                    def downstreamDev = build job: 'deploy-a-version',
                        parameters: [
                            string(name: 'ENVIRONMENT_NAME', value: 'dev'),
                            booleanParam(name: 'RUN_TESTS', value: true)
                        ],
                        wait: true,
                        propagate: false
                    if (downstreamDev.result != 'SUCCESS') {
                        def upstreamBuildNumber = currentBuild.number
                        def downstreamBuildNumber = downstreamDev.getNumber()
                        def failedStage = "deploy-a-version [dev]"
                        slackSend(
                            channel: '#npgw-notification-jenkins',
                            color: '#danger',
                            message: ":x: *FAILURE*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${upstreamBuildNumber}> at stage ${failedStage} failed – see <${env.JENKINS_URL}/job/deploy-a-version/${downstreamBuildNumber}/|#${downstreamBuildNumber}>"
                        )
                        currentBuild.description = 'FAILURE_NOTIFIED'
                        error("DEV deploy failed")
                    }
                }
            }
        }

        stage('Trigger deploy-a-version pipeline: TEST environment') {
            steps {
                script {
                    def downstreamTest = build job: 'deploy-a-version',
                        parameters: [
                            string(name: 'ENVIRONMENT_NAME', value: 'test'),
                            booleanParam(name: 'RUN_TESTS', value: true)
                        ],
                        wait: true,
                        propagate: false
                    if (downstreamTest.result != 'SUCCESS') {
                        def upstreamBuildNumber = currentBuild.number
                        def downstreamBuildNumber = downstreamTest.getNumber()
                        def failedStage = "deploy-a-version [test]"
                        slackSend(
                            color: 'danger',
                            message: ":x: *FAILURE*: `${env.JOB_NAME}` <${env.BUILD_URL}|#${upstreamBuildNumber}> at stage ${failedStage} failed – see <${env.JENKINS_URL}/job/deploy-a-version/${downstreamBuildNumber}/|#${downstreamBuildNumber}>"
                        )
                        currentBuild.description = 'FAILURE_NOTIFIED'
                        error("Test deploy failed")
                    }
                }
            }
        }

        stage('Promote version to RC') {
            steps {
                script {
                    def imageList = readJSON text: sh(script: "cat ${WORKSPACE}/${IMAGE_FILE}", returnStdout: true).trim()
                    def nightlyTag = env.RELEASE_VERSION

                    for (image in imageList) {

                        if (!nightlyTag) {
                            error "No nightly tag found for ${image.repoName}"
                        }

                        sh """
                            IMAGE_DATA=\$(aws ecr batch-get-image \
                              --repository-name "npgw/${image.repoName}" \
                              --image-ids imageTag=${nightlyTag} \
                              --query 'images[0].{manifest: imageManifest, digest: imageId.imageDigest}' \
                              --output json)

                            IMAGE_MANIFEST=\$(echo "\$IMAGE_DATA" | jq -r '.manifest')
                            IMAGE_DIGEST=\$(echo "\$IMAGE_DATA" | jq -r '.digest')

                            aws ecr put-image \
                              --repository-name "npgw/${image.repoName}" \
                              --image-tag "${nightlyTag.replace('-nightly', '-rc')}" \
                              --image-manifest "\$IMAGE_MANIFEST" \
                              --image-digest "\$IMAGE_DIGEST"
                        """
                    }

                    // rename S3 prefix from -nightly to -rc
                    sh """
                        for repo in npgw-portal npgw-common npgw-terraform; do
                            aws s3 mv \\
                                s3://${env.AWS_BUCKET_NAME}/\$repo/${nightlyTag}/ \\
                                s3://${env.AWS_BUCKET_NAME}/\$repo/${nightlyTag.replace('-nightly', '-rc')}/ \\
                                --recursive
                        done
                    """
                }
            }
        }

        stage('Merge main branch to rc') {
            steps {
                withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
                    script {
                        def repos = readJSON text: sh(script: "cat ${WORKSPACE}/${REPO_FILE}", returnStdout: true).trim()

                        def version
                        try {
                            version = (env.RELEASE_VERSION =~ /^(\d+\.\d+)\./)[0][1]
                        } catch (Exception e) {
                            error "Could not extract Major Version from ${env.RELEASE_VERSION}"
                        }
                        def rcBranchName = "release/v${version}-rc"

                        repos.each { repo ->
                            sh """
                                gh api -X POST /repos/NPGW/${repo.repoName}/merges \\
                                    -H "Accept: application/vnd.github+json" \\
                                    -f base=${rcBranchName} \\
                                    -f head=main \\
                                    -f commit_message="Merge main into ${rcBranchName}"
                            """
                        }
                    }
                }
            }
        }
    }
}