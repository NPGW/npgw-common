paths:
  /transaction:
    get:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: GET
        uri: '${uri}/transaction'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"

    post:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: POST
        uri: '${uri}/transaction'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"

  /transaction/{transactionId}:
    get:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: GET
        uri: '${uri}/transaction/{transactionId}'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

  /transaction/{transactionId}/capture:
    post:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: POST
        uri: '${uri}/transaction/{transactionId}/capture'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

  /transaction/{transactionId}/refund:
    post:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: POST
        uri: '${uri}/transaction/{transactionId}/refund'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

  /transaction/{transactionId}/cancel:
    post:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: POST
        uri: '${uri}/transaction/{transactionId}/refund'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

  /token:
    post:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: POST
        uri: '${uri}/token'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"

  /resource/{resource}:
    get:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: GET
        uri: '${uri}/resource/{resource}'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.resource: method.request.path.resource

  /resource/page/{transactionId}:
    get:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: GET
        uri: '${uri}/resource/page/{transactionId}'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

  /resource/frame/{transactionId}:
    get:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: GET
        uri: '${uri}/resource/frame/{transactionId}'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

  /fingerprint/{transactionId}:
    get:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: GET
        uri: '${uri}/fingerprint/{transactionId}'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

    post:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: POST
        uri: '${uri}/fingerprint/{transactionId}'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

  /challenge/{transactionId}:
    get:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: GET
        uri: '${uri}/challenge/{transactionId}'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

    post:
      x-amazon-apigateway-integration:
        connectionType: ${connectionType}
        connectionId: ${connectionId}
        type: ${type}
        httpMethod: POST
        uri: '${uri}/challenge/{transactionId}'
        passthroughBehavior: ${passthroughBehavior}
        requestParameters:
          integration.request.header.Accept: "' '"
          integration.request.path.transactionId: method.request.path.transactionId

components:
  securitySchemes:
    apiKeyAuth:
      x-amazon-apigateway-authtype: ${x-amazon-apigateway-authtype}
      x-amazon-apigateway-authorizer:
        ${x-amazon-apigateway-authorizer}

x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
