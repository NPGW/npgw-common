openapi: 3.0.3

info:
  title: NPGW Merchant API
  version: 0.1.4

externalDocs:
    url: https://docs.npgw.xyz
    description: View our full Technical Documentation here

servers:
  - url: https://npgw.xyz/merchant-v1
    description: Production server

tags:
  - name: authentication
    description: Validate yourself with the identity service and obtain an access token.
  - name: payment
    description: Submit a Payment to the NPGW Gateway.
    externalDocs:
      url: https://docs.npgw.xyz/
  - name: status
    description: Query the status of a Transaction on the NPGW Gateway.

paths:
  /transaction:
    get:
      tags:
        - status
      summary: Get Transaction
      description: Retrieve transaction details using your External Transaction ID
      operationId: getTransaction
      security:
        - apiKeyAuth: []
      parameters:
        - in: query
          name: merchantId
          required: true
          schema:
            type: string
        - in: query
          name: externalTransactionId
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/TransactionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/Error'

    post:
      tags:
        - payment
      summary: Create a new CreditCard Transaction.
      description: |
        A successful request will return a secure payment URL via **{body.paymentUrl}** to which the customer should be redirected to complete online 3DSecure authentication with their bank. Payments will proceed to Authorization on successful authentication by the customer.
      operationId: createTransaction
      security:
        - apiKeyAuth: []
      parameters:
        - in: query
          name: async
          schema:
            type: boolean
          description: Indicates whether the transaction should be processed asynchronously from our downstream CreditCard Acquirers. When set to true, the request will return immediately with a status indicating that processing is ongoing.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '422':
          $ref: '#/components/responses/Validation'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/Error'

  /transaction/{transactionId}:
    get:
      tags:
        - status
      summary: Get Transaction by ID
      description: Retrieve transaction details using the NPGW Transaction ID
      operationId: getTransactionById
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/TransactionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/Error'

  /transaction/{transactionId}/capture:
    post:
      operationId: captureTransaction
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '422':
          $ref: '#/components/responses/Validation'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/Error'

  /transaction/{transactionId}/refund:
    post:
      operationId: refundTransaction
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '422':
          $ref: '#/components/responses/Validation'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/Error'

  /transaction/{transactionId}/cancel:
    post:
      operationId: cancelTransaction
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '422':
          $ref: '#/components/responses/Validation'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/Error'

  /token:
    post:
      tags:
        - authentication
      summary: Create a new or refresh an expired Bearer Token.
      description: |
        This token allows you to execute operations on the NPGW Gateway APIs with authority, and whilst a single token will expire after 15 minutes, you can generate one at any time.
      operationId: getToken
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
        description: Secret token.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseToken'
          description: Everything works as expected.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '422':
          $ref: '#/components/responses/Validation'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/Error'

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: JWT-based authentication where the token is passed in the Authorization header.

  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid data was sent or some parameters are missing.
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: No valid key provided.
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The API key doesn't have a permission for this action.
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The requested resource doesn't exist.
    NotAcceptable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.
    NotAllowed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request method is not supported for the requested resource.
    Validation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request payload could not pass the validation (probably incorrect).
    TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The user has sent too many requests in a given amount of time.
    Error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Something went wrong on our side.

    TransactionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionResponse'
      description: Everything works as expected.

  schemas:
    Error:
      type: object
      required:
        - timestamp
        - status
        - message
        - path
      properties:
        timestamp:
          type: integer
          format: int64
        status:
          type: integer
        message:
          type: string
        path:
          type: string
        code:
          type: string
        id:
          type: string

    ResponseToken:
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
        idToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
          example: Bearer

    PaymentMethod:
      type: string
      description: Payment method
      enum:
        - CreditCard

    PaymentDetails:
      type: object
      required:
        - paymentMethod
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
      discriminator:
        propertyName: paymentMethod
        mapping:
          CreditCard: CreditCardDetails

    CreditCardDetails:
      allOf:
        - $ref: '#/components/schemas/PaymentDetails'
        - type: object
        - description: CreditCard
          required:
            - pan
            - expMonth
            - expYear
            - cvv
            - cardHolderName
          properties:
            pan:
              type: string
              description: Full card number - must be a valid credit/debit card number.
              example: 2303779999000275
              minLength: 13
              maxLength: 19
              pattern: '^\d{13,19}$'
            expMonth:
              type: string
              description: Card expiry month (01..12).
              example: 06
              minLength: 1
              maxLength: 2
              pattern: '^(0?[1-9]|1[0-2])$'
            expYear:
              type: string
              description: Card expiry year (e.g. 2024).
              example: 2029
              minLength: 4
              maxLength: 4
              pattern: '^\d{4}$'
            cvv:
              type: string
              description: 3-digit card security code (CVV2/CVC2).
              example: 148
              minLength: 3
              maxLength: 3
              pattern: '^\d{3}$'
            cardHolderName:
              type: string
              description: Card holder name.
              example: Hal Jordan
              minLength: 2
              maxLength: 150
              pattern: '^[\p{L}0-9 \_.,-:&]+$'
            cardType:
              $ref: '#/components/schemas/CardType'

    CustomerDetails:
      type: object
      required:
        - firstName
        - lastName
        - email
        - address1
        - city
        - zip
        - country
      properties:
        externalCustomerId:
          type: string
          description: Unique id for each customer in the merchant's system.
          example: 32556
          maxLength: 40
          pattern: '^[a-zA-Z0-9\-]*$'
        firstName:
          type: string
          description: Billing Address first name.
          example: Hal
          minLength: 2
          maxLength: 100
          pattern: '^[\p{L} ''\-]+$'
        lastName:
          type: string
          description: Billing Address last name.
          example: Jordan
          minLength: 2
          maxLength: 100
          pattern: '^[\p{L} ''\-]+$'
        email:
          type: string
          description: Customer email addres - must be a valid email address format.
          example: hal@greenlantern.com
          maxLength: 255
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        address1:
          type: string
          description: Billing Address line 1 (Street Address and Number).
          example: 59 Gil Broome Avenue
          minLength: 5
          maxLength: 125
          pattern: '^[\p{L}\d .,#/()\-]+$'
        address2:
          type: string
          description: Billing Address line 2.
          example: unit 5
          minLength: 5
          maxLength: 125
          pattern: '^[\p{L}\d .,#/()\-]+$'
        city:
          type: string
          description: Billing Address city.
          example: Coast City
          minLength: 1
          maxLength: 125
          pattern: '^[\p{L} ]+$'
        state:
          type: string
          description: Billing Address state - required if the country is US or CA, and must be a valid alpha-2 US state or Canadian province code accordingly. Optional field for all other countries.
          example: CA
          minLength: 2
          maxLength: 15
          pattern: '^[\p{L} ]+$'
        country:
          type: string
          description: Billing Address 2-char country code (ISO 3166-1, alpha-2).
          example: US
          minLength: 2
          maxLength: 2
          pattern: '^[A-Z]{2}$'
        zip:
          type: string
          description: Billing Address Zip or Postal code.
          example: 90210
          minLength: 2
          maxLength: 10
          pattern: '^[a-zA-Z0-9\- ]*$'
        phone:
          type: string
          description: Billing Address phone number (incl. country code).
          example: +17723493500
          minLength: 7
          maxLength: 14
        dateOfBirth:
          type: string
          description: Customer's date of birth - must be 18+ y.o.
          example: 2004-08-24
          pattern: '^\d{4}-\d{2}-\d{2}$'
        ipAddress:
          type: string
          description: Customer's IP address - IPv4 or IPv6.
          example: 192.168.3.123
          minLength: 7
          maxLength: 39

    CurrencyCode:
      type: string
      description: Currency Type (ISO 4217)
      enum:
        - EUR
        - USD
        - GBP

    CardType:
      type: string
      description: Credit Card Type
      enum:
        - VISA
        - MASTERCARD
        - UNKNOWN

    ThreeDSecureStatus:
      type: string
      description: 3DSecure status
      enum:
        - PENDING
        - SUCCESS
        - FAILED
        - CANCELLED

    ThreeDSecureDetails:
      type: object
      description: 3DSecure details
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/ThreeDSecureStatus'

    TransactionType:
      type: string
      description: |
        PURCHASE - purchase order is a document issued by a buyer to a supplier for goods or services.
        AUTH - authorization refers to the process of verifying a cardholder's ability to make a purchase.
      enum:
        - PURCHASE
        - AUTH

    BaseTransaction:
      type: object
      required:
        - merchantId
        - amount
        - currency
        - redirectUrlSuccess
        - redirectUrlCancel
        - redirectUrlFail
        - paymentDetails
      properties:
        merchantId:
          type: string
          description: Unique merchant id in the NPGW system.
          example: company786
        externalTransactionId:
          type: string
          description: Unique transaction id in merchant's system.
          example: REF00L00000
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z0-9]*$'
        type:
          $ref: '#/components/schemas/TransactionType'
          default: PURCHASE
        amount:
          type: integer
          minimum: 1
          maximum: 9999999
          description: Transaction amount.
          example: 1999
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        notificationUrl:
          type: string
          description: The merchant HTTPS Endpoint to be used for server-to-server webhooks. Please note that the Gateway doesn’t guarantee the delivery of notifications in the order that they’re generated, and as such ensure your event destination isn't dependent on receiving events in a specific order. 
          example: https://example.com/notification_endpoint
        redirectUrlSuccess:
          type: string
          description: The merchant URL to which the user should be redirected in case of a successful transaction.
          example: https://example.com/success
        redirectUrlCancel:
          type: string
          description: The merchant URL to which the user should be redirected in case of a cancelled transaction.
          example: https://example.com/cancel
        redirectUrlFail:
          type: string
          description: The merchant URL to which the user should be redirected in case of a failed transaction.
          example: https://example.com/failed
        expiresAt:
          format: date-time
          type: string
          description: |
            ISO 8601. Time of the transaction expiration, minimum allowed is _timestamp+30min_ (will be set by default if field is omitted). 
            If the transaction is not completed within this time, we will reject any attempt to complete it. 
            The expiration is extended each time a user (re-)submits a payment, so provided expiration date will be updated in most cases. 
            Max value is _(now)+3h_
          example: 2021-12-22T05:17:56.323Z
        paymentDetails:
          oneOf:
            - $ref: '#/components/schemas/CreditCardDetails'

    TransactionStatus:
      type: string
      description: |
        INITIATED - submitted to NPGW.
        PENDING - submitted to an acquirer.
        SUCCESS - confirmed success/captured at acquirer, customer has paid.
        FAILED - confirmed failed at acquirer; the customer has not paid and must try again via a new transaction.
        CANCELLED - cancelled by customer (generally a UI cancel button), must try again via a new transaction.
        EXPIRED - unsuccessful transaction after the time specified in the "expires At" field, must try again via a new transaction.
      enum:
        - INITIATED
        - PENDING
        - SUCCESS
        - FAILED
        - CANCELLED
        - EXPIRED

    TransactionError:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    TransactionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseTransaction'
        - type: object
          properties:
            transactionId:
              type: string
              description: Unique transaction id in the NPGW system.
              example: id.transaction.vxIXLerl1XJ-KxoChv5GU6ASc3TTzAk7zM8U5jzV_n9kXyPNp4yAAuAILXriju5g
            status:
              $ref: '#/components/schemas/TransactionStatus'
            error:
              $ref: '#/components/schemas/TransactionError'
            createdOn:
              format: date-time
              type: string
              description: Created time (ISO 8601).
              example: 2022-04-08T11:11:59.711Z
            updatedOn:
              format: date-time
              type: string
              description: Updated time (ISO 8601).
              example: 2022-04-08T11:11:59.711Z
            paymentUrl:
              type: string
              description: Payment link to which the customer should be redirected to complete 3DSecure and subsequent processing.
              example: https://api-staging.npgw.xyz/merchant-v1/resource/page/id.transaction.vxIXLerl1XJ-KxoChv5GU6ASc3TTzAk7zM8U5jzV_n9kXyPNp4yAAuAILXriju5g?token=lUQu10zR3wnroN4a_n7EsyXokK6kJR0NK4USWC_1FZIDrs_bwGFXHfaEGkNv9UUq
            threeDSecureDetails:
              $ref: '#/components/schemas/ThreeDSecureDetails'

    Transaction:
      allOf:
        - $ref: '#/components/schemas/BaseTransaction'
        - type: object
          required:
            - customerDetails
          properties:
            customerDetails:
              $ref: '#/components/schemas/CustomerDetails'
